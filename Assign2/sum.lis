     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers.
     3                                  ; Copyright (C) 2024  Carlos Secas .          *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;Author information
    17                                  ;  Author name: Carlos Secas
    18                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    19                                  ;  CWID: 886088269
    20                                  ;  Class: 240-09 Section 09
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays of floating point numbers
    24                                  ;  Programming languages: one module in C, six in x86, one in C++, and one in bash
    25                                  ;  Date program began: 2025-Feb-12
    26                                  ;  Date of last update: 2025-Feb-19
    27                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, output_array.asm, isfloat.asm, sum.asm, swap.asm, sort.c, r.sh.
    28                                  ;  Testing: Alpha testing completed.  All functions are correct.
    29                                  ;  Status: Ready for release to customers
    30                                  ;
    31                                  ;Purpose
    32                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array
    33                                  ;  values are then printed, along with the variance of the numbers.
    34                                  ;
    35                                  ;This file:
    36                                  ;  File name: manager.asm
    37                                  ;  Language: X86-64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l manage.lis -o manager.o manager.asm
    40                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l manage.lis -o manager.o manager.asm
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;  Prototype of this function: extern double sum();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  ;declarations
    50                                  
    51                                  global sum
    52                                  
    53                                  extern printf
    54                                  
    55                                  segment .data
    56                                  ;empty
    57                                  
    58                                  segment .bss
    59                                  ;empty
    60                                  
    61                                  segment .text
    62                                  
    63                                  sum:
    64                                  
    65                                  ; Backup general-purpose registers
    66 00000000 55                      push rbp
    67 00000001 4889E5                  mov rbp, rsp
    68 00000004 53                      push rbx
    69 00000005 51                      push rcx
    70 00000006 52                      push rdx
    71 00000007 57                      push rdi
    72 00000008 56                      push rsi
    73 00000009 4150                    push r8
    74 0000000B 4151                    push r9
    75 0000000D 4152                    push r10
    76 0000000F 4153                    push r11
    77 00000011 4154                    push r12
    78 00000013 4155                    push r13
    79 00000015 4156                    push r14
    80 00000017 4157                    push r15
    81 00000019 9C                      pushf
    82                                  
    83                                  ; Backup SSE registers
    84 0000001A 4883EC10                sub rsp, 16
    85 0000001E F30F7F3424              movdqu [rsp], xmm6  ; Save xmm6 (scratch register)
    86                                  
    87                                  ; Initialize sum to 0.0
    88 00000023 660F57C0                xorpd xmm0, xmm0      ; xmm0 = 0.0 (used to accumulate sum)
    89 00000027 4989FE                  mov r14, rdi        ; r14 = pointer to my_array
    90 0000002A 4989F7                  mov r15, rsi        ; r15 = number of elements
    91 0000002D 4D31ED                  xor r13, r13        ; r13 = loop counter (index)
    92                                  
    93                                  sum_loop:
    94 00000030 4D39FD                  cmp r13, r15        ; Check if we've processed all elements
    95 00000033 7D0F                    jge sum_done        ; If so, exit loop
    96                                  
    97                                  ; Load my_array[r13] into xmm1
    98 00000035 F3430F7E0CEE            movq xmm1, [r14 + r13 * 8]  
    99                                  
   100                                  ; Add to sum
   101 0000003B F20F58C1                addsd xmm0, xmm1  
   102                                  
   103                                  ; Increment loop counter
   104 0000003F 49FFC5                  inc r13
   105 00000042 EBEC                    jmp sum_loop
   106                                  
   107                                  sum_done:
   108                                  ; Restore SSE registers
   109 00000044 F30F6F3424              movdqu xmm6, [rsp]
   110 00000049 4883C410                add rsp, 16
   111                                  
   112                                  ;Restore the GPRs
   113 0000004D 9D                      popf
   114 0000004E 415F                    pop r15
   115 00000050 415E                    pop r14
   116 00000052 415D                    pop r13
   117 00000054 415C                    pop r12
   118 00000056 415B                    pop r11
   119 00000058 415A                    pop r10
   120 0000005A 4159                    pop r9
   121 0000005C 4158                    pop r8
   122 0000005E 5E                      pop rsi
   123 0000005F 5F                      pop rdi
   124 00000060 5A                      pop rdx
   125 00000061 59                      pop rcx
   126 00000062 5B                      pop rbx
   127 00000063 5D                      pop rbp ;Restore rbp to the base of the activation record of the caller program
   128 00000064 C3                      ret 
   129                                  ;End of the function sum ====================================================================
