     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed,
     3                                  ; and displays the sum of the numbers.
     4                                  ; Copyright (C) 2025  Carlos Secas .          *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     7                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     8                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     9                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    10                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Carlos Secas
    19                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    20                                  ;  CWID: 886088269
    21                                  ;  Class: 240-09 Section 09
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Arrays of floating point numbers
    25                                  ;  Programming languages: one module in C, six in x86, one in C++, and one in bash
    26                                  ;  Date program began: 2025-Feb-12
    27                                  ;  Date of last update: 2025-Feb-19
    28                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, output_array.asm, isfloat.asm, sum.asm, swap.asm, sort.c, r.sh.
    29                                  ;  Testing: Alpha testing completed.  All functions are correct.
    30                                  ;  Status: Ready for release to customers
    31                                  ;
    32                                  ;Purpose
    33                                  ; This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
    34                                  ; and sorts the array and displays it.
    35                                  ;
    36                                  ;Devlopment
    37                                  ;  This assembly code was developed using NASM in a Linux-based enviorment within Github Codespaces,
    38                                  ;  accessed remotely from a Windows 10 system.  
    39                                  ;
    40                                  ;This file:
    41                                  ;  File name: sum.asm
    42                                  ;  Language: X86-64
    43                                  ;  Max page width: 124 columns
    44                                  ;  Assemble (standard): nasm -f elf64 -l sum.lis -o sum.o sum.asm
    45                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l sum.lis -o sum.o sum.asm
    46                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    47                                  ;  Prototype of this function: extern double sum();
    48                                  ; 
    49                                  ;
    50                                  ;
    51                                  ;
    52                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    53                                  
    54                                  ;declarations
    55                                  
    56                                  global sum
    57                                  
    58                                  extern printf
    59                                  
    60                                  segment .data
    61                                  ;empty
    62                                  
    63                                  segment .bss
    64                                  ;empty
    65                                  
    66                                  segment .text
    67                                  
    68                                  sum:
    69                                  
    70                                  ;backup GPRs
    71 00000000 55                      push rbp
    72 00000001 4889E5                  mov rbp, rsp
    73 00000004 53                      push rbx
    74 00000005 51                      push rcx
    75 00000006 52                      push rdx
    76 00000007 57                      push rdi
    77 00000008 56                      push rsi
    78 00000009 4150                    push r8
    79 0000000B 4151                    push r9
    80 0000000D 4152                    push r10
    81 0000000F 4153                    push r11
    82 00000011 4154                    push r12
    83 00000013 4155                    push r13
    84 00000015 4156                    push r14
    85 00000017 4157                    push r15
    86 00000019 9C                      pushf
    87                                  
    88                                  
    89                                  ;initialize sum to 0.0
    90 0000001A 660F57C0                xorpd xmm0, xmm0 ; initialize xmm0 to zero
    91 0000001E 4989FE                  mov r14, rdi ; r14 = pointer to my_array
    92 00000021 4989F7                  mov r15, rsi ; r15 = number of elements
    93 00000024 4D31ED                  xor r13, r13 ; r13 = loop counter (index)
    94                                  
    95                                  sum_loop:
    96 00000027 4D39FD                  cmp r13, r15 ; Check if we processed all the elements
    97 0000002A 7D0F                    jge sum_done ; If so exit loop
    98                                  
    99                                  ;load my_array[r13] into xmm1
   100 0000002C F3430F7E0CEE            movq xmm1, [r14 + r13 * 8]  
   101                                  
   102                                  ;add to sum
   103 00000032 F20F58C1                addsd xmm0, xmm1  
   104                                  
   105                                  ;increment loop counter
   106 00000036 49FFC5                  inc r13
   107 00000039 EBEC                    jmp sum_loop
   108                                  
   109                                  sum_done:
   110                                  
   111                                  
   112                                  ;Restore the GPRs
   113 0000003B 9D                      popf
   114 0000003C 415F                    pop r15
   115 0000003E 415E                    pop r14
   116 00000040 415D                    pop r13
   117 00000042 415C                    pop r12
   118 00000044 415B                    pop r11
   119 00000046 415A                    pop r10
   120 00000048 4159                    pop r9
   121 0000004A 4158                    pop r8
   122 0000004C 5E                      pop rsi
   123 0000004D 5F                      pop rdi
   124 0000004E 5A                      pop rdx
   125 0000004F 59                      pop rcx
   126 00000050 5B                      pop rbx
   127 00000051 5D                      pop rbp ;Restore rbp to the base of the activation record of the caller program
   128 00000052 C3                      ret 
   129                                  ;End of the function sum ====================================================================
