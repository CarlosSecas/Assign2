     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers.
     3                                  ; Copyright (C) 2025  Carlos Secas.          *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;Author information
    17                                  ;  Author name: Carlos Secas
    18                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    19                                  ;  CWID: 886088269
    20                                  ;  Class: 240-09 Section 09
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays of Floating Point Numbers
    24                                  ;  Programming languages: One module in C, six in x86, one in C++, and one in bash
    25                                  ;  Date program began: 2025-Feb-12
    26                                  ;  Date of last update: 2025-Feb-19
    27                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, swap.asm, isfloat.asm, output_array.asm, sort.c, r.sh
    28                                  ;  Testing: Alpha testing completed.  All functions are correct.
    29                                  ;  Status: Ready for release to customers
    30                                  ;
    31                                  ;Purpose
    32                                  ; This program takes floating point number inputs from the user and puts them in an array. 
    33                                  ; The array values are then printed, and displays the sum of the numbers.
    34                                  ;
    35                                  ;This file:
    36                                  ;  File name: input_array.asm
    37                                  ;  Language: X86-64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l input.lis -o input.o input_array.asm
    40                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l input.lis -o input.o input_array.asm
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;  Prototype of this function: extern double input_array();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  ;declarations
    50                                  
    51                                  
    52                                  global input_array
    53                                  
    54                                  
    55                                  extern printf
    56                                  
    57                                  
    58                                  extern scanf
    59                                  
    60                                  
    61                                  extern isfloat
    62                                  
    63                                  
    64                                  extern atof
    65                                  
    66                                  
    67                                  segment .data                
    68                                  
    69                                  
    70 00000000 0A546865206C617374-     invalid_msg db 10, "The last input was invalid and not entered into the array. Try again.", 10,0
    70 00000009 20696E707574207761-
    70 00000012 7320696E76616C6964-
    70 0000001B 20616E64206E6F7420-
    70 00000024 656E74657265642069-
    70 0000002D 6E746F207468652061-
    70 00000036 727261792E20547279-
    70 0000003F 20616761696E2E0A00 
    71 00000048 2533317300              floatformat db "%31s", 0 ; string formating for scanf
    72 0000004D 44656275673A204E75-     debug_msg db "Debug: Number of inputs = %d", 10, 0
    72 00000056 6D626572206F662069-
    72 0000005F 6E70757473203D2025-
    72 00000068 640A00             
    73 0000006B 44656275673A204375-     debug_index_msg db "Debug: Current input index = %d", 10, 0
    73 00000074 7272656E7420696E70-
    73 0000007D 757420696E64657820-
    73 00000086 3D2025640A00       
    74                                  
    75                                  
    76                                  segment .bss 
    77                                   align 64
    78 00000000 <res 00000340>           backup_storage_area resb 832
    79 00000340 <res 00000020>           buffer resb 32 ; buffer to hold input string
    80                                   segment .text
    81                                  input_array:
    82                                  
    83                                  
    84                                  ;backup GPRs
    85 00000000 55                      push rbp
    86 00000001 4889E5                  mov rbp, rsp
    87 00000004 53                      push rbx
    88 00000005 51                      push rcx
    89 00000006 52                      push rdx
    90 00000007 57                      push rdi
    91 00000008 56                      push rsi
    92 00000009 4150                    push r8
    93 0000000B 4151                    push r9
    94 0000000D 4152                    push r10
    95 0000000F 4153                    push r11
    96 00000011 4154                    push r12
    97 00000013 4155                    push r13
    98 00000015 4156                    push r14
    99 00000017 4157                    push r15
   100 00000019 9C                      pushf
   101                                  
   102                                  
   103                                  ;backup other registers/sse registers
   104 0000001A B807000000              mov rax,7
   105 0000001F BA00000000              mov rdx,0
   106 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   107                                  
   108                                  
   109                                  ;Store array, elements of array in stable registers
   110 0000002C 4989FE                  mov r14, rdi ; r14 = my_array
   111 0000002F 4989F7                  mov r15, rsi ; r15 = max allowed elements
   112                                  
   113                                  
   114 00000032 4D31ED                  xor r13, r13 ; r13 = index at 0
   115                                  
   116                                  
   117                                  
   118                                  
   119                                  topofloop:
   120                                  
   121                                  
   122 00000035 4D39FD                  cmp r13, r15 ; check if index >= size of array
   123 00000038 0F8D86000000            jge outofloop ; if yes, exit
   124                                  
   125                                  ; Debug: Print current r13 value before scanning input
   126 0000003E 48BF-                       mov rdi, debug_index_msg
   126 00000040 [6B00000000000000] 
   127 00000048 4C89EE                      mov rsi, r13
   128 0000004B B800000000                  mov rax, 0
   129 00000050 E8(00000000)                call printf
   130                                  
   131                                  
   132                                  ;Use floatformat
   133 00000055 48BF-                   mov rdi, floatformat ;pass formatstring
   133 00000057 [4800000000000000] 
   134 0000005F 48BE-                   mov rsi, buffer ;pass buffer for input
   134 00000061 [4003000000000000] 
   135 00000069 E8(00000000)            call scanf ;read user input into buffer
   136                                  
   137                                  
   138                                  
   139                                  
   140                                  ;Check for Ctrl+D *** This was the main reason it kept getting repeated values
   141                                  ;cmp rax, 0
   142                                  ;je outofloop
   143                                  ;cmp rax, -1 ; if scanf returns -1, user pressed ctrl+d
   144                                  ;je outofloop ; exit input loop
   145                                  
   146                                  
   147                                  
   148                                  ; Check if scanf successfully read a value
   149 0000006E 4883F801                cmp rax, 1         ; scanf should return 1 on success
   150 00000072 7550                    jne outofloop      ; If not 1 (e.g., Ctrl+D or invalid input), exit loop
   151                                  
   152                                  
   153                                  
   154                                  
   155                                  ;Validate input (isfloat)
   156 00000074 48BF-                   mov rdi, buffer ; pass input string to isfloat
   156 00000076 [4003000000000000] 
   157 0000007E E8(00000000)            call isfloat
   158 00000083 4883F800                cmp rax, 0 ; check if rax == rax
   159 00000087 741F                    je invalid_input ; if rax == 0, jump to invalid_input
   160                                  
   161                                  
   162                                  ;Convert string to float using atof
   163 00000089 48BF-                   mov rdi, buffer
   163 0000008B [4003000000000000] 
   164 00000093 E8(00000000)            call atof
   165                                  
   166                                  
   167                                  
   168                                  
   169 00000098 4D39FD                  cmp r13, r15    ; Ensure we don't write beyond the allocated space
   170 0000009B 7D27                    jge outofloop   ; If we hit max, stop input
   171                                  
   172                                  
   173 0000009D 66430FD604EE            movq [r14 + r13 * 8], xmm0 ; store converted float in my_array[r13]
   174 000000A3 49FFC5                  inc r13 ; increment valid input count
   175                                  
   176                                  
   177 000000A6 EB8D                    jmp topofloop ;repeat loop
   178                                  
   179                                  
   180                                  invalid_input:
   181                                  
   182                                  
   183 000000A8 48BF-                   mov rdi, invalid_msg
   183 000000AA [0000000000000000] 
   184 000000B2 E8(00000000)            call printf
   185 000000B7 C60425[40030000]00      mov byte [buffer], 0 ; Clear buffer to ensure fesh input
   186 000000BF E971FFFFFF              jmp topofloop
   187                                  
   188                                  
   189                                  outofloop:
   190                                  
   191                                  ; Debug: Print number of valid inputs
   192 000000C4 48BF-                   mov rdi, debug_msg   ; Debug message
   192 000000C6 [4D00000000000000] 
   193 000000CE 4C89EE                  mov rsi, r13         ; Number of inputs
   194 000000D1 B800000000              mov rax, 0           ; No floating point arguments
   195 000000D6 E8(00000000)            call printf
   196 000000DB 4C89E8                  mov rax, r13 ; return the number of valid inputs
   197                                  
   198                                  
   199                                  
   200                                  
   201                                  ;Restore the GPRs
   202 000000DE 9D                      popf
   203 000000DF 415F                    pop r15
   204 000000E1 415E                    pop r14
   205 000000E3 415D                    pop r13
   206 000000E5 415C                    pop r12
   207 000000E7 415B                    pop r11
   208 000000E9 415A                    pop r10
   209 000000EB 4159                    pop r9
   210 000000ED 4158                    pop r8
   211 000000EF 5E                      pop rsi
   212 000000F0 5F                      pop rdi
   213 000000F1 5A                      pop rdx
   214 000000F2 59                      pop rcx
   215 000000F3 5B                      pop rbx
   216 000000F4 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   217 000000F5 C3                      ret
   218                                  ;End of the function input_array ====================================================================
   219                                  
   220                                  
