     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
     3                                  ; and sorts the array and displays it.
     4                                  ; Copyright (C) 2025  Carlos Secas.          *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     7                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     8                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     9                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    10                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Carlos Secas
    19                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    20                                  ;  CWID: 886088269
    21                                  ;  Class: 240-09 Section 09
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Arrays of Floating Point Numbers
    25                                  ;  Programming languages: One module in C, six in x86, one in C++, and one in bash
    26                                  ;  Date program began: 2025-Feb-12
    27                                  ;  Date of last update: 2025-Feb-19
    28                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, swap.asm, isfloat.asm, output_array.asm, sort.c, r.sh
    29                                  ;  Testing: Alpha testing completed.  All functions are correct.
    30                                  ;  Status: Ready for release to customers
    31                                  ;
    32                                  ;Purpose
    33                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
    34                                  ;  and sorts the array and displays it.
    35                                  ;
    36                                  ;Devlopment
    37                                  ;  This assembly code was developed using NASM in a Linux-based enviorment within Github Codespaces,
    38                                  ;  accessed remotely from a Windows 10 system.  
    39                                  ;
    40                                  ;This file:
    41                                  ;  File name: input_array.asm
    42                                  ;  Language: X86-64
    43                                  ;  Max page width: 124 columns
    44                                  ;  Assemble (standard): nasm -f elf64 -l swap.lis -o swap.o swap.asm
    45                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l swap.lis -o swap.o swap.asm
    46                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    47                                  ;  Prototype of this function: extern void swap();
    48                                  ; 
    49                                  ;
    50                                  ;
    51                                  ;
    52                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    53                                  
    54                                  
    55                                  
    56                                  
    57                                  ;declarations
    58                                  
    59                                  global swap
    60                                  
    61                                  segment .data
    62                                  ;empty
    63                                  
    64                                  segment .bss
    65                                  ;empty
    66                                  
    67                                  segment .text
    68                                  
    69                                  swap:
    70                                  
    71                                  ;backup GPRs
    72 00000000 55                      push rbp
    73 00000001 4889E5                  mov rbp, rsp
    74 00000004 53                      push rbx
    75 00000005 51                      push rcx
    76 00000006 52                      push rdx
    77 00000007 57                      push rdi
    78 00000008 56                      push rsi
    79 00000009 4150                    push r8
    80 0000000B 4151                    push r9
    81 0000000D 4152                    push r10
    82 0000000F 4153                    push r11
    83 00000011 4154                    push r12
    84 00000013 4155                    push r13
    85 00000015 4156                    push r14
    86 00000017 4157                    push r15
    87 00000019 9C                      pushf
    88                                  
    89                                  
    90 0000001A F30F7E07                movq xmm0, [rdi]  ; Load x into xmm0
    91 0000001E F30F7E0E                movq xmm1, [rsi]  ; Load y into xmm1
    92                                  
    93                                  ;Swap the values
    94 00000022 660FD60F                movq [rdi], xmm1  ; Store y in x
    95 00000026 660FD606                movq [rsi], xmm0  ; Store x in y
    96                                  
    97                                  
    98                                  ;Restore the GPRs
    99 0000002A 9D                      popf
   100 0000002B 415F                    pop r15
   101 0000002D 415E                    pop r14
   102 0000002F 415D                    pop r13
   103 00000031 415C                    pop r12
   104 00000033 415B                    pop r11
   105 00000035 415A                    pop r10
   106 00000037 4159                    pop r9
   107 00000039 4158                    pop r8
   108 0000003B 5E                      pop rsi
   109 0000003C 5F                      pop rdi
   110 0000003D 5A                      pop rdx
   111 0000003E 59                      pop rcx
   112 0000003F 5B                      pop rbx
   113 00000040 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   114 00000041 C3                      ret
   115                                  ;End of the function swap ====================================================================
