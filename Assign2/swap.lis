     1                                  
     2                                  ;****************************************************************************************************************************
     3                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
     4                                  ; and sorts the array and displays it.
     5                                  ; Copyright (C) 2025  Carlos Secas.          *
     6                                  ;                                                                                                                           *
     7                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     8                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     9                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    10                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    11                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  
    16                                  
    17                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    18                                  ;Author information
    19                                  ;  Author name: Carlos Secas
    20                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    21                                  ;  CWID: 886088269
    22                                  ;  Class: 240-09 Section 09
    23                                  ;
    24                                  ;Program information
    25                                  ;  Program name: Arrays of Floating Point Numbers
    26                                  ;  Programming languages: One module in C, six in x86, one in C++, and one in bash
    27                                  ;  Date program began: 2025-Feb-12
    28                                  ;  Date of last update: 2025-Feb-19
    29                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, swap.asm, isfloat.asm, output_array.asm, sort.c, r.sh
    30                                  ;  Testing: Alpha testing completed.  All functions are correct.
    31                                  ;  Status: Ready for release to customers
    32                                  ;
    33                                  ;Purpose
    34                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
    35                                  ;  and sorts the array and displays it.
    36                                  ;
    37                                  ;This file:
    38                                  ;  File name: input_array.asm
    39                                  ;  Language: X86-64
    40                                  ;  Max page width: 124 columns
    41                                  ;  Assemble (standard): nasm -f elf64 -l swap.lis -o swap.o swap.asm
    42                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l swap.lis -o swap.o swap.asm
    43                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    44                                  ;  Prototype of this function: extern void swap();
    45                                  ; 
    46                                  ;
    47                                  ;
    48                                  ;
    49                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    50                                  
    51                                  
    52                                  
    53                                  
    54                                  ;declarations
    55                                  
    56                                  global swap
    57                                  
    58                                  segment .data
    59                                  ;empty
    60                                  
    61                                  segment .bss
    62                                  ;empty
    63                                  
    64                                  segment .text
    65                                  
    66                                  swap:
    67                                  
    68                                  ;backup GPRs
    69 00000000 55                      push rbp
    70 00000001 4889E5                  mov rbp, rsp
    71 00000004 53                      push rbx
    72 00000005 51                      push rcx
    73 00000006 52                      push rdx
    74 00000007 57                      push rdi
    75 00000008 56                      push rsi
    76 00000009 4150                    push r8
    77 0000000B 4151                    push r9
    78 0000000D 4152                    push r10
    79 0000000F 4153                    push r11
    80 00000011 4154                    push r12
    81 00000013 4155                    push r13
    82 00000015 4156                    push r14
    83 00000017 4157                    push r15
    84 00000019 9C                      pushf
    85                                  
    86                                  ;Load memory values into xmm registers
    87 0000001A F30F7E07                movq xmm0, [rdi]  ; Load x into xmm0
    88 0000001E F30F7E0E                movq xmm1, [rsi]  ; Load y into xmm1
    89                                  
    90                                  ;Swap the values
    91 00000022 660FD60F                movq [rdi], xmm1  ; Store y in x
    92 00000026 660FD606                movq [rsi], xmm0  ; Store x in y
    93                                  
    94                                  
    95                                  ;Restore the GPRs
    96 0000002A 9D                      popf
    97 0000002B 415F                    pop r15
    98 0000002D 415E                    pop r14
    99 0000002F 415D                    pop r13
   100 00000031 415C                    pop r12
   101 00000033 415B                    pop r11
   102 00000035 415A                    pop r10
   103 00000037 4159                    pop r9
   104 00000039 4158                    pop r8
   105 0000003B 5E                      pop rsi
   106 0000003C 5F                      pop rdi
   107 0000003D 5A                      pop rdx
   108 0000003E 59                      pop rcx
   109 0000003F 5B                      pop rbx
   110 00000040 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   111 00000041 C3                      ret
   112                                  ;End of the function swap ====================================================================
