     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed,
     3                                  ; and displays the sum of the numbers.
     4                                  ; Copyright (C) 2025  Carlos Secas.          *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     7                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     8                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     9                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    10                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Carlos Secas
    19                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    20                                  ;  CWID: 886088269
    21                                  ;  Class: 240-09 Section 09
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Arrays of Floating Point Numbers
    25                                  ;  Programming languages: One module in C, six in x86, one in C++, and one in bash
    26                                  ;  Date program began: 2025-Feb-12
    27                                  ;  Date of last update: 2025-Feb-19
    28                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, swap.asm, isfloat.asm, output_array.asm, sort.c, r.sh
    29                                  ;  Testing: Alpha testing completed.  All functions are correct.
    30                                  ;  Status: Ready for release to customers
    31                                  ;
    32                                  ;Purpose
    33                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
    34                                  ;  and sorts the array and displays it.
    35                                  ;
    36                                  ;Devlopment
    37                                  ;  This assembly code was developed using NASM in a Linux-based enviorment within Github Codespaces,
    38                                  ;  accessed remotely from a Windows 10 system.  
    39                                  ;
    40                                  ;This file:
    41                                  ;  File name: output_array.asm
    42                                  ;  Language: X86-64
    43                                  ;  Max page width: 124 columns
    44                                  ;  Assemble (standard): nasm -f elf64 -l output.lis -o output.o output_array.asm
    45                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l output.lis -o output.o output_array.asm
    46                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    47                                  ;  Prototype of this function: extern void output_array();
    48                                  ; 
    49                                  ;
    50                                  ;
    51                                  ;
    52                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    53                                  
    54                                  ;declarations
    55                                  
    56                                  global output_array
    57                                  
    58                                  extern printf
    59                                  
    60                                  
    61                                  segment .data
    62 00000000 252E396C662000          float_format db "%.9lf ", 0 ;format for printing 64-bit floats
    63 00000007 0A00                    newline db 10, 0 
    64                                  
    65                                  segment .bss
    66                                  ;empty
    67                                  
    68                                  
    69                                  segment .text
    70                                  
    71                                  output_array:
    72                                  
    73                                  
    74                                  ;backup GPRs
    75 00000000 55                      push rbp
    76 00000001 4889E5                  mov rbp, rsp
    77 00000004 53                      push rbx
    78 00000005 51                      push rcx
    79 00000006 52                      push rdx
    80 00000007 57                      push rdi
    81 00000008 56                      push rsi
    82 00000009 4150                    push r8
    83 0000000B 4151                    push r9
    84 0000000D 4152                    push r10
    85 0000000F 4153                    push r11
    86 00000011 4154                    push r12
    87 00000013 4155                    push r13
    88 00000015 4156                    push r14
    89 00000017 4157                    push r15
    90 00000019 9C                      pushf
    91                                  
    92                                  
    93 0000001A 4989FE                  mov r14, rdi  ; r14 = pointer to array (first argument)
    94 0000001D 4989F7                  mov r15, rsi  ; r15 = number of elements (second argument)
    95 00000020 4D31ED                  xor r13, r13  ; r13 = loop index (counter)
    96                                  
    97                                  
    98                                  output_loop:
    99 00000023 4D39FD                  cmp r13, r15  ; Ensure we don't print more than the valid inputs
   100 00000026 7D1F                    jge output_done  ; Stop when we've printed `r15` elements
   101                                  
   102                                  ; Load current float from array
   103 00000028 F3430F7E04EE            movq xmm0, [r14 + r13 * 8]  ; Load my_array[r13] into xmm0
   104                                  
   105                                  ; Print float
   106 0000002E 48BF-                   mov rdi, float_format  ; Format string
   106 00000030 [0000000000000000] 
   107 00000038 B801000000              mov rax, 1  ; Floating point argument
   108 0000003D E8(00000000)            call printf
   109                                  
   110                                  
   111 00000042 49FFC5                  inc r13  ; Move to next array element
   112 00000045 EBDC                    jmp output_loop
   113                                  
   114                                  
   115                                  output_done:
   116                                  ; Print a newline after array output
   117 00000047 48BF-                   mov rdi, newline
   117 00000049 [0700000000000000] 
   118 00000051 E8(00000000)            call printf
   119                                  
   120                                  
   121                                  ; Restore general-purpose registers
   122 00000056 9D                      popf
   123 00000057 415F                    pop r15
   124 00000059 415E                    pop r14
   125 0000005B 415D                    pop r13
   126 0000005D 415C                    pop r12
   127 0000005F 415B                    pop r11
   128 00000061 415A                    pop r10
   129 00000063 4159                    pop r9
   130 00000065 4158                    pop r8
   131 00000067 5E                      pop rsi
   132 00000068 5F                      pop rdi
   133 00000069 5A                      pop rdx
   134 0000006A 59                      pop rcx
   135 0000006B 5B                      pop rbx
   136 0000006C 5D                      pop rbp
   137 0000006D C3                      ret
   138                                  ;End of the function output ====================================================================
