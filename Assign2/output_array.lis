     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers.
     3                                  ; Copyright (C) 2025  Carlos Secas.          *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;Author information
    17                                  ;  Author name: Carlos Secas
    18                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    19                                  ;  CWID: 886088269
    20                                  ;  Class: 240-09 Section 09
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays of Floating Point Numbers
    24                                  ;  Programming languages: One module in C, six in x86, one in C++, and one in bash
    25                                  ;  Date program began: 2025-Feb-12
    26                                  ;  Date of last update: 2025-Feb-19
    27                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, swap.asm, isfloat.asm, output_array.asm, sort.c, r.sh
    28                                  ;  Testing: Alpha testing completed.  All functions are correct.
    29                                  ;  Status: Ready for release to customers
    30                                  ;
    31                                  ;Purpose
    32                                  ; This program takes floating point number inputs from the user and puts them in an array. 
    33                                  ; The array values are then printed, and displays the sum of the numbers.
    34                                  ;
    35                                  ;This file:
    36                                  ;  File name: output_array.asm
    37                                  ;  Language: X86-64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l output.lis -o output.o output_array.asm
    40                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l output.lis -o output.o output_array.asm
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;  Prototype of this function: extern double output_array();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  global output_array
    50                                  
    51                                  
    52                                  extern printf
    53                                  
    54                                  
    55                                  segment .data
    56 00000000 252E396C662000             float_format db "%.9lf ", 0  ; Format for printing 64-bit floats
    57 00000007 0A00                       newline db 10, 0             ; Newline character
    58                                  
    59                                  
    60                                  segment .text
    61                                  output_array:
    62                                  
    63                                  
    64                                     ; Backup general-purpose registers
    65 00000000 55                         push rbp
    66 00000001 4889E5                     mov rbp, rsp
    67 00000004 53                         push rbx
    68 00000005 51                         push rcx
    69 00000006 52                         push rdx
    70 00000007 57                         push rdi
    71 00000008 56                         push rsi
    72 00000009 4150                       push r8
    73 0000000B 4151                       push r9
    74 0000000D 4152                       push r10
    75 0000000F 4153                       push r11
    76 00000011 4154                       push r12
    77 00000013 4155                       push r13
    78 00000015 4156                       push r14
    79 00000017 4157                       push r15
    80 00000019 9C                         pushf
    81                                  
    82                                  
    83 0000001A 4989FE                     mov r14, rdi  ; r14 = pointer to array (first argument)
    84 0000001D 4989F7                     mov r15, rsi  ; r15 = number of elements (second argument)
    85 00000020 4D31ED                     xor r13, r13  ; r13 = loop index (counter)
    86                                  
    87                                  
    88                                  output_loop:
    89 00000023 4D39FD                     cmp r13, r15  ; Ensure we don't print more than the valid inputs
    90 00000026 7D1F                       jge output_done  ; Stop when we've printed `r15` elements
    91                                  
    92                                  
    93                                     ; Load current float from array
    94 00000028 F3430F7E04EE               movq xmm0, [r14 + r13 * 8]  ; Load my_array[r13] into xmm0
    95                                  
    96                                  
    97                                  
    98                                  
    99                                     ; Print float
   100 0000002E 48BF-                      mov rdi, float_format  ; Format string
   100 00000030 [0000000000000000] 
   101 00000038 B801000000                 mov rax, 1  ; Floating point argument
   102 0000003D E8(00000000)               call printf
   103                                  
   104                                  
   105 00000042 49FFC5                     inc r13  ; Move to next array element
   106 00000045 EBDC                       jmp output_loop
   107                                  
   108                                  
   109                                  output_done:
   110                                     ; Print a newline after array output
   111 00000047 48BF-                      mov rdi, newline
   111 00000049 [0700000000000000] 
   112 00000051 E8(00000000)               call printf
   113                                  
   114                                  
   115                                     ; Restore general-purpose registers
   116 00000056 9D                         popf
   117 00000057 415F                       pop r15
   118 00000059 415E                       pop r14
   119 0000005B 415D                       pop r13
   120 0000005D 415C                       pop r12
   121 0000005F 415B                       pop r11
   122 00000061 415A                       pop r10
   123 00000063 4159                       pop r9
   124 00000065 4158                       pop r8
   125 00000067 5E                         pop rsi
   126 00000068 5F                         pop rdi
   127 00000069 5A                         pop rdx
   128 0000006A 59                         pop rcx
   129 0000006B 5B                         pop rbx
   130 0000006C 5D                         pop rbp
   131 0000006D C3                         ret
