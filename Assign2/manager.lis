     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
     3                                  ; and sorts the array and displays it.
     4                                  ; Copyright (C) 2024  Carlos Secas .          *
     5                                  ;                                                                                                                           *
     6                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     7                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     8                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     9                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    10                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;Author information
    18                                  ;  Author name: Carlos Secas
    19                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    20                                  ;  CWID: 886088269
    21                                  ;  Class: 240-09 Section 09
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Arrays of floating point numbers
    25                                  ;  Programming languages: one module in C, six in x86, one in C++, and one in bash
    26                                  ;  Date program began: 2025-Feb-12
    27                                  ;  Date of last update: 2025-Feb-19
    28                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, output_array.asm, isfloat.asm, sum.asm, swap.asm, sort.c, r.sh.
    29                                  ;  Testing: Alpha testing completed.  All functions are correct.
    30                                  ;  Status: Ready for release to customers
    31                                  ;
    32                                  ;Purpose
    33                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers,
    34                                  ;  and sorts the array and displays it.
    35                                  ;
    36                                  ;This file:
    37                                  ;  File name: manager.asm
    38                                  ;  Language: X86-64
    39                                  ;  Max page width: 124 columns
    40                                  ;  Assemble (standard): nasm -f elf64 -l manage.lis -o manager.o manager.asm
    41                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l manage.lis -o manager.o manager.asm
    42                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    43                                  ;  Prototype of this function: extern double manager();
    44                                  ; 
    45                                  ;
    46                                  ;
    47                                  ;
    48                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    49                                  
    50                                  ;declarations
    51                                  
    52                                  global manager
    53                                  
    54                                  extern input_array
    55                                  
    56                                  extern sum
    57                                  
    58                                  extern sort
    59                                  
    60                                  extern output_array
    61                                  
    62                                  extern printf
    63                                  
    64                                  
    65                                  segment .data
    66                                  
    67 00000000 0A546869732070726F-     program_msg1 db 10, "This program will manage your arrays of 64-bit floats.", 10,0
    67 00000009 6772616D2077696C6C-
    67 00000012 206D616E6167652079-
    67 0000001B 6F7572206172726179-
    67 00000024 73206F662036342D62-
    67 0000002D 697420666C6F617473-
    67 00000036 2E0A00             
    68 00000039 0A466F722074686520-     program_msg2 db 10, "For the array enter a sequence of 64-bit floats seperated by white space.", 10,0
    68 00000042 617272617920656E74-
    68 0000004B 657220612073657175-
    68 00000054 656E6365206F662036-
    68 0000005D 342D62697420666C6F-
    68 00000066 617473207365706572-
    68 0000006F 617465642062792077-
    68 00000078 686974652073706163-
    68 00000081 652E0A00           
    69 00000085 416674657220746865-     program_msg3 db "After the last input press enter followed by Control+D:", 10,0
    69 0000008E 206C61737420696E70-
    69 00000097 757420707265737320-
    69 000000A0 656E74657220666F6C-
    69 000000A9 6C6F77656420627920-
    69 000000B2 436F6E74726F6C2B44-
    69 000000BB 3A0A00             
    70 000000BE 0A5468657365206E75-     values_stored_in_arr db 10, "These numbers were received and placed into an array", 10,0
    70 000000C7 6D6265727320776572-
    70 000000D0 652072656365697665-
    70 000000D9 6420616E6420706C61-
    70 000000E2 63656420696E746F20-
    70 000000EB 616E2061727261790A-
    70 000000F4 00                 
    71 000000F5 0A5468652073756D20-     sum_of_arr db 10, "The sum of the inputted numbers is %.9lf", 10,0
    71 000000FE 6F662074686520696E-
    71 00000107 707574746564206E75-
    71 00000110 6D6265727320697320-
    71 00000119 252E396C660A00     
    72 00000120 0A5468697320697320-     sorted_arr db 10, "This is the array after the sort process completed:", 10,0
    72 00000129 746865206172726179-
    72 00000132 206166746572207468-
    72 0000013B 6520736F7274207072-
    72 00000144 6F6365737320636F6D-
    72 0000014D 706C657465643A0A00 
    73                                  
    74                                  
    75                                  segment .bss 
    76                                  
    77                                  align 64
    78 00000000 <res 00000340>          backup_storage_area resb 832
    79 00000340 <res 00000008>          sum_result resq 1 ; reserve space for 1 floating point #
    80                                  
    81 00000348 <res 000000A0>          my_array resq 20
    82                                  
    83                                  
    84                                  segment .text
    85                                  
    86                                  manager:
    87                                  
    88                                  ;backup GPRs
    89 00000000 55                      push rbp
    90 00000001 4889E5                  mov rbp, rsp
    91 00000004 53                      push rbx
    92 00000005 51                      push rcx
    93 00000006 52                      push rdx
    94 00000007 57                      push rdi
    95 00000008 56                      push rsi
    96 00000009 4150                    push r8
    97 0000000B 4151                    push r9
    98 0000000D 4152                    push r10
    99 0000000F 4153                    push r11
   100 00000011 4154                    push r12
   101 00000013 4155                    push r13
   102 00000015 4156                    push r14
   103 00000017 4157                    push r15
   104 00000019 9C                      pushf
   105                                  
   106                                  ;backup other registers
   107 0000001A B807000000              mov rax,7
   108 0000001F BA00000000              mov rdx,0
   109 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   110                                  
   111                                  
   112                                  ;Print the purpose of the program
   113 0000002C B800000000              mov rax, 0
   114 00000031 48BF-                   mov rdi, program_msg1
   114 00000033 [0000000000000000] 
   115 0000003B E8(00000000)            call printf
   116                                  
   117                                  ;Print first part of program input prompt
   118 00000040 B800000000              mov rax, 0
   119 00000045 48BF-                   mov rdi, program_msg2
   119 00000047 [3900000000000000] 
   120 0000004F E8(00000000)            call printf
   121                                  
   122                                  ;Print second part of program input prompt
   123 00000054 B800000000              mov rax, 0
   124 00000059 48BF-                   mov rdi, program_msg3
   124 0000005B [8500000000000000] 
   125 00000063 E8(00000000)            call printf
   126                                  
   127                                  
   128                                  ;Call input array
   129 00000068 48BF-                   mov rdi, my_array
   129 0000006A [4803000000000000] 
   130 00000072 BE14000000              mov rsi, 20
   131 00000077 E8(00000000)            call input_array
   132                                  
   133                                  ;Store the size of the array from input_array in non-volatile register to use for other functions.
   134 0000007C 4989C5                  mov r13, rax
   135                                  
   136                                  ;Print values stored in arr
   137 0000007F B800000000              mov rax, 0
   138 00000084 48BF-                   mov rdi, values_stored_in_arr
   138 00000086 [BE00000000000000] 
   139 0000008E E8(00000000)            call printf
   140                                  
   141                                  
   142                                  ;Call output array to loop through the values in my_array and display them.
   143 00000093 48BF-                   mov rdi, my_array
   143 00000095 [4803000000000000] 
   144 0000009D 4C89EE                  mov rsi, r13 ; tells output_array how many elements it should print
   145 000000A0 E8(00000000)            call output_array
   146                                  
   147                                  
   148                                  ;Call the sum function
   149 000000A5 48BF-                   mov rdi, my_array
   149 000000A7 [4803000000000000] 
   150 000000AF 4C89EE                  mov rsi, r13
   151 000000B2 E8(00000000)            call sum
   152                                  
   153 000000B7 660FD60425-             movq [sum_result], xmm0 ; load value xmm0 from sum function into memory location sum_result
   153 000000BC [40030000]         
   154                                  
   155                                  ;Print sum_of_arr and display the result
   156 000000C0 48BF-                   mov rdi, sum_of_arr
   156 000000C2 [F500000000000000] 
   157 000000CA F20F100425-             movsd xmm0, [sum_result]
   157 000000CF [40030000]         
   158 000000D3 B801000000              mov rax, 1 
   159 000000D8 E8(00000000)            call printf
   160                                  
   161                                  
   162                                  ;Call the sort function
   163 000000DD 48BF-                   mov rdi, my_array
   163 000000DF [4803000000000000] 
   164 000000E7 4C89EE                  mov rsi, r13
   165 000000EA E8(00000000)            call sort
   166                                  
   167                                  ;Print message about the sorted array
   168 000000EF B800000000              mov rax, 0
   169 000000F4 48BF-                   mov rdi, sorted_arr
   169 000000F6 [2001000000000000] 
   170 000000FE E8(00000000)            call printf
   171                                  
   172                                  ;Call output array to print each value in the sorted array
   173 00000103 48BF-                   mov rdi, my_array
   173 00000105 [4803000000000000] 
   174 0000010D 4C89EE                  mov rsi, r13
   175 00000110 E8(00000000)            call output_array
   176                                  
   177 00000115 F20F100425-             movsd xmm0, [sum_result] ; load sum back into xmm0
   177 0000011A [40030000]         
   178                                  
   179                                  
   180                                  ;Restore the GPRs
   181 0000011E 9D                      popf
   182 0000011F 415F                    pop r15
   183 00000121 415E                    pop r14
   184 00000123 415D                    pop r13
   185 00000125 415C                    pop r12
   186 00000127 415B                    pop r11
   187 00000129 415A                    pop r10
   188 0000012B 4159                    pop r9
   189 0000012D 4158                    pop r8
   190 0000012F 5E                      pop rsi
   191 00000130 5F                      pop rdi
   192 00000131 5A                      pop rdx
   193 00000132 59                      pop rcx
   194 00000133 5B                      pop rbx
   195 00000134 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   196 00000135 C3                      ret
   197                                  ;End of the function manager ====================================================================
