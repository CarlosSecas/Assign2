     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays of floating point numbers".  This program takes floating point number inputs from the user and puts them in an array. The array values are then printed, and displays the sum of the numbers.
     3                                  ; Copyright (C) 2024  Carlos Secas .          *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;Author information
    17                                  ;  Author name: Carlos Secas
    18                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    19                                  ;  CWID: 886088269
    20                                  ;  Class: 240-09 Section 09
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Arrays of floating point numbers
    24                                  ;  Programming languages: one module in C, six in x86, one in C++, and one in bash
    25                                  ;  Date program began: 2025-Feb-12
    26                                  ;  Date of last update: 2025-Feb-19
    27                                  ;  Files in this program: main.cpp, manager.asm, input_array.asm, output_array.asm, isfloat.asm, sum.asm, swap.asm, sort.c, r.sh.
    28                                  ;  Testing: Alpha testing completed.  All functions are correct.
    29                                  ;  Status: Ready for release to customers
    30                                  ;
    31                                  ;Purpose
    32                                  ;  This program takes floating point number inputs from the user and puts them in an array. The array
    33                                  ;  values are then printed, along with the variance of the numbers.
    34                                  ;
    35                                  ;This file:
    36                                  ;  File name: manager.asm
    37                                  ;  Language: X86-64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l manage.lis -o manager.o manager.asm
    40                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l manage.lis -o manager.o manager.asm
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;  Prototype of this function: extern double manager();
    43                                  ; 
    44                                  ;
    45                                  ;
    46                                  ;
    47                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    48                                  
    49                                  ;declarations
    50                                  
    51                                  global manager
    52                                  
    53                                  extern input_array
    54                                  
    55                                  extern sum
    56                                  
    57                                  extern sort
    58                                  
    59                                  extern output_array
    60                                  
    61                                  extern printf
    62                                  
    63                                  
    64                                  segment .data
    65                                  
    66 00000000 0A546869732070726F-     program_msg1 db 10, "This program will manage your arrays of 64-bit floats.", 10,0
    66 00000009 6772616D2077696C6C-
    66 00000012 206D616E6167652079-
    66 0000001B 6F7572206172726179-
    66 00000024 73206F662036342D62-
    66 0000002D 697420666C6F617473-
    66 00000036 2E0A00             
    67 00000039 0A466F722074686520-     program_msg2 db 10, "For the array enter a sequence of 64-bit floats seperated by white space.", 10,0
    67 00000042 617272617920656E74-
    67 0000004B 657220612073657175-
    67 00000054 656E6365206F662036-
    67 0000005D 342D62697420666C6F-
    67 00000066 617473207365706572-
    67 0000006F 617465642062792077-
    67 00000078 686974652073706163-
    67 00000081 652E0A00           
    68 00000085 416674657220746865-     program_msg3 db "After the last input press enter followed by Control+D:", 10,0
    68 0000008E 206C61737420696E70-
    68 00000097 757420707265737320-
    68 000000A0 656E74657220666F6C-
    68 000000A9 6C6F77656420627920-
    68 000000B2 436F6E74726F6C2B44-
    68 000000BB 3A0A00             
    69 000000BE 0A5468657365206E75-     values_stored_in_arr db 10, "These numbers were received and placed into an array", 10,0
    69 000000C7 6D6265727320776572-
    69 000000D0 652072656365697665-
    69 000000D9 6420616E6420706C61-
    69 000000E2 63656420696E746F20-
    69 000000EB 616E2061727261790A-
    69 000000F4 00                 
    70 000000F5 0A5468652073756D20-     sum_of_arr db 10, "The sum of the inputted numbers is %.9lf", 10,0
    70 000000FE 6F662074686520696E-
    70 00000107 707574746564206E75-
    70 00000110 6D6265727320697320-
    70 00000119 252E396C660A00     
    71 00000120 0A5468697320697320-     sorted_arr db 10, "This is the array after the sort process completed:", 10,0
    71 00000129 746865206172726179-
    71 00000132 206166746572207468-
    71 0000013B 6520736F7274207072-
    71 00000144 6F6365737320636F6D-
    71 0000014D 706C657465643A0A00 
    72 00000156 0000000000000000        zero_float dq 0.0   ; Define a 64-bit floating point zero
    73                                  
    74                                  
    75                                  segment .bss 
    76                                  
    77                                  align 64
    78 00000000 <res 00000340>          backup_storage_area resb 832
    79 00000340 <res 00000008>          sum_result resq 1 ; reserve space for 1 floating point #
    80                                  
    81 00000348 <res 000000A0>          my_array resq 20 ; <name> <data-type> <size>
    82                                  
    83                                  
    84                                  segment .text
    85                                  manager:
    86                                  
    87                                  ;backup GPRs
    88 00000000 55                      push rbp
    89 00000001 4889E5                  mov rbp, rsp
    90 00000004 53                      push rbx
    91 00000005 51                      push rcx
    92 00000006 52                      push rdx
    93 00000007 57                      push rdi
    94 00000008 56                      push rsi
    95 00000009 4150                    push r8
    96 0000000B 4151                    push r9
    97 0000000D 4152                    push r10
    98 0000000F 4153                    push r11
    99 00000011 4154                    push r12
   100 00000013 4155                    push r13
   101 00000015 4156                    push r14
   102 00000017 4157                    push r15
   103 00000019 9C                      pushf
   104                                  
   105                                  ;backup other registers
   106 0000001A B807000000              mov rax,7
   107 0000001F BA00000000              mov rdx,0
   108 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   109                                  
   110                                  
   111                                  ;Print the purpose of the program
   112 0000002C B800000000              mov rax, 0
   113 00000031 48BF-                   mov rdi, program_msg1
   113 00000033 [0000000000000000] 
   114 0000003B E8(00000000)            call printf
   115                                  
   116                                  ;Print first part of program input prompt
   117 00000040 B800000000              mov rax, 0
   118 00000045 48BF-                   mov rdi, program_msg2
   118 00000047 [3900000000000000] 
   119 0000004F E8(00000000)            call printf
   120                                  
   121                                  ;Print second part of program input prompt
   122 00000054 B800000000              mov rax, 0
   123 00000059 48BF-                   mov rdi, program_msg3
   123 0000005B [8500000000000000] 
   124 00000063 E8(00000000)            call printf
   125                                  
   126                                  
   127                                  
   128                                  ; Zero initialize the array before use
   129 00000068 48BF-                   mov rdi, my_array
   129 0000006A [4803000000000000] 
   130 00000072 B914000000              mov rcx, 20
   131 00000077 4831C0                  xor rax, rax
   132                                  clear_array:
   133 0000007A 488907                      mov qword [rdi], rax
   134 0000007D 4883C708                    add rdi, 8
   135 00000081 E2F7                        loop clear_array
   136                                  
   137                                  
   138                                  
   139                                  
   140                                  ;Call input array
   141 00000083 48BF-                   mov rdi, my_array
   141 00000085 [4803000000000000] 
   142 0000008D BE14000000              mov rsi, 20
   143 00000092 E8(00000000)            call input_array
   144                                  
   145                                  ;Store the size of the array from input_array in non-volatile register to use for other functions.
   146 00000097 4989C5                  mov r13, rax
   147                                  
   148                                  ;Print values stored in arr
   149 0000009A B800000000              mov rax, 0
   150 0000009F 48BF-                   mov rdi, values_stored_in_arr
   150 000000A1 [BE00000000000000] 
   151 000000A9 E8(00000000)            call printf
   152                                  
   153                                  
   154                                  ;Call output array to loop through the values in my_array and display them.
   155 000000AE 48BF-                   mov rdi, my_array
   155 000000B0 [4803000000000000] 
   156 000000B8 4C89EE                  mov rsi, r13 ; tells output_array how many elements it should print
   157 000000BB E8(00000000)            call output_array
   158                                  
   159                                  
   160                                  ;Call the sum function
   161 000000C0 48BF-                   mov rdi, my_array
   161 000000C2 [4803000000000000] 
   162 000000CA 4C89EE                  mov rsi, r13
   163 000000CD E8(00000000)            call sum
   164                                  
   165 000000D2 660FD60425-             movq [sum_result], xmm0 ; load value xmm0 from sum function into memory location sum_result
   165 000000D7 [40030000]         
   166                                  
   167                                  ;Print sum_of_arr and display the result
   168 000000DB 48BF-                   mov rdi, sum_of_arr
   168 000000DD [F500000000000000] 
   169 000000E5 F20F100425-             movsd xmm0, [sum_result]
   169 000000EA [40030000]         
   170 000000EE B801000000              mov rax, 1 
   171 000000F3 E8(00000000)            call printf
   172                                  
   173                                  
   174                                  ;Call the sort function
   175 000000F8 48BF-                   mov rdi, my_array
   175 000000FA [4803000000000000] 
   176 00000102 4C89EE                  mov rsi, r13
   177 00000105 E8(00000000)            call sort
   178                                  
   179                                  ;Print message about the sorted array
   180 0000010A B800000000              mov rax, 0
   181 0000010F 48BF-                   mov rdi, sorted_arr
   181 00000111 [2001000000000000] 
   182 00000119 E8(00000000)            call printf
   183                                  
   184                                  ;Call output array to print each value in the sorted array
   185 0000011E 48BF-                   mov rdi, my_array
   185 00000120 [4803000000000000] 
   186 00000128 4C89EE                  mov rsi, r13
   187 0000012B E8(00000000)            call output_array
   188                                  
   189 00000130 F20F100425-             movsd xmm0, [sum_result] ; load sum back into xmm0
   189 00000135 [40030000]         
   190                                  
   191                                  
   192                                  ;Restore the GPRs
   193 00000139 9D                      popf
   194 0000013A 415F                    pop r15
   195 0000013C 415E                    pop r14
   196 0000013E 415D                    pop r13
   197 00000140 415C                    pop r12
   198 00000142 415B                    pop r11
   199 00000144 415A                    pop r10
   200 00000146 4159                    pop r9
   201 00000148 4158                    pop r8
   202 0000014A 5E                      pop rsi
   203 0000014B 5F                      pop rdi
   204 0000014C 5A                      pop rdx
   205 0000014D 59                      pop rcx
   206 0000014E 5B                      pop rbx
   207 0000014F 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   208 00000150 C3                      ret
   209                                  ;End of the function manager ====================================================================
